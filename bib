#!/bin/bash
# shellcheck disable=1111,1112,2034

text=$(cat ~/Documents/obsidian/Christianity/Bible/LSB/Reading/"${1}".md)

width=$(tput cols)
hline=$(
  printf '=%.0s' $(seq 1 "$width")
  echo
)
# fit to terminal width
if [[ $2 != '' ]]; then
  title="$(echo "$text" | grep '^# .*' | sed 's/# //'):$2"
else
  title="$(echo "$text" | grep '^# .*' | sed 's/# //')"
fi

# remove headings
text=$(echo "$text" | sed -E '1,3{d}')
text=$(echo "$text" | sed -E 's/^## (.*)//')
text=$(echo "$text" | sed -E 's/^(# |## |#### |##### ).*//')

# format verses
text=$(echo "$text" | sed -E 's/###### (¶* *[0-9][0-9][0-9])/\1   tempnewline/g')
text=$(echo "$text" | sed -E 's/###### (¶* *[0-9][0-9])/\1    tempnewline/g')
text=$(echo "$text" | sed -E 's/###### (¶* *[0-9])/\1     tempnewline/g')
text=$(echo "$text" | sed -E ':a;$!{N;s/tempnewline\n//;ba;}')
text=$(echo "$text" | sed -E 's/¶ 1 /1 /g')
text=$(echo "$text" | sed -E ':a;$!{N;s/\n¶ / ~\n/;ba;}')

# fix/remove markdown syntax
text=$(echo "$text" | sed -E 's/\\\*/tempasterisk/g')
#text=$(echo "$text" | sed -E 's/—/––/g')
text=$(echo "$text" | sed -E 's/—/--/g')
text=$(echo "$text" | sed -E 's/\*\*([A-Za-z0-9])/(\1/g')
text=$(echo "$text" | sed -E 's/([A-Za-z0-9])\*\*/\1)/g')
text=$(echo "$text" | sed -E 's/\*([A-Za-z0-9])/[\1/g')
text=$(echo "$text" | sed -E 's/([A-Za-z0-9!?.,”’;:])\*/\1]/g')
#2bold=$(tput bold)
#2italics=$(tput sitm)
#2normal=$(tput sgr0)
#2text=$(echo "$text" | sed -E "s/\*\*([A-Za-z])/${bold}\1/g")
#2text=$(echo "$text" | sed -E "s/([A-Za-z])\*\*/\1${normal}/g")
#2text=$(echo "$text" | sed -E "s/\*([A-Za-z])/${italics}\1/g")
#2text=$(echo "$text" | sed -E "s/([A-Za-z])\*/\1${normal}/g")
text=$(echo "$text" | sed -E 's/\\\[/[/g')
text=$(echo "$text" | sed -E 's/\\\]/]/g')
text=$(echo "$text" | sed -E 's/\\//g')
# remove footnotes
#text=$(echo "$text" | sed -E 's/^\[\^[1-9]\].*//g')
#text=$(echo "$text" | sed -E 's/\[\^[1-9]\]//g')
# convert footnotes
text=$(echo "$text" | sed -E 's/\[\^1\]:*/¹/g')
text=$(echo "$text" | sed -E 's/\[\^2\]:*/²/g')
text=$(echo "$text" | sed -E 's/\[\^3\]:*/³/g')
text=$(echo "$text" | sed -E 's/\[\^4\]:*/⁴/g')
text=$(echo "$text" | sed -E 's/\[\^5\]:*/⁵/g')
text=$(echo "$text" | sed -E 's/\[\^6\]:*/⁶/g')
text=$(echo "$text" | sed -E 's/^> /      > /g')
#text=$(echo "$text" | sed -E 's/^> /      /g')
#text=$(echo "$text" | sed -E 's/> / /g')
text=$(echo "$text" | sed -E 's/tempasterisk/*/g')

# add space before lines that are not on the same line as the verse num
text=$(echo "$text" | sed -E 's/(^[^0-9 ])/      \1/g')

# fix justification in Psalms
if [[ $1 == *ps* ]]; then
  # add newline when width is a space
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n      /"); done
  # hyphenate words that are in width
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n      \3\4/"); done
  # move char to newline if width-1 is a space or symbol
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([ “‘[(])([A-Za-z0-9“‘])/\1\n      \2\3/"); done
  # move char to newline if width-1 is a hyphen
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})-([A-Za-z0-9“‘])/\1-\n      \2/"); done
  # add newline right after punctuation
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n      /"); done
  # fix verses that didn't get move to newline
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n      /"); done
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width))})([!?.,”’;:])/\1\n      \2/"); done
  for i in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n      /"); done
  for i in {1..4}; do
    # add newline when width is a space
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 6))}) /\1\n      > /"); done
    # hyphenate words that are in width
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 7))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n      > \3\4/"); done
    # move char to newline if width-1 is a space or symbol
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 7))})([ “‘[)])([A-Za-z0-9“‘])/\1\n      > \2\3/"); done
    # add newline right after punctuation
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 6))})([!?.,”’;:])/\1\2\n      > /"); done
    # fix verses that didn't get move to newline
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 5))}) /\1\n      > /"); done
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 5))})([!?.,”’;:])/\1\n      > \2/"); done
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 6))}) /\1\n      > /"); done
    # fix verse number spacing
    text=$(echo "$text" | sed -E 's/([0-9]{1})      /\1     /g')
    text=$(echo "$text" | sed -E 's/([0-9]{2})     /\1    /g')
    text=$(echo "$text" | sed -E 's/([0-9]{3})    /\1   /g')
    # add newline if width+1 is a space
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 5))}) /\1\n      > /"); done
  done
else
  # fix justification in all other chapters
  for i in {1..4}; do
    # add newline when width is a space
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n      /"); done
    # hyphenate words that are in width
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n      \3\4/"); done
    # move char to newline if width-1 is a space or symbol
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([ “‘[(])([A-Za-z0-9“‘])/\1\n      \2\3/"); done
    # move char to newline if width-1 is a hyphen
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})-([A-Za-z0-9“‘])/\1-\n      \2/"); done
    # add newline right after punctuation
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n      /"); done
    # fix verses that didn't get move to newline
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n      /"); done
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width))})([!?.,”’;:])/\1\n      \2/"); done
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n      /"); done
    # fix verse number spacing
    text=$(echo "$text" | sed -E 's/([0-9]{1})      /\1     /g')
    text=$(echo "$text" | sed -E 's/([0-9]{2})     /\1   /g')
    text=$(echo "$text" | sed -E 's/([0-9]{3})   /\1  /g')
    # add newline if width+1 is a space
    for j in {1..3}; do text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n      /"); done
  done
fi

# remove newlines to make copying verses easier (by triple click)

# fix spacing
text=$(echo "$text" | sed -E 's/^ {2,4}([^ ])/      \1/g')
text=$(echo "$text" | sed -E 's/^ {6,}([^ ])/      \1/g')

# replace smart smart with dumb quotes
# right
#text=$(echo "$text" | sed -E "s/”/\"/g")
#text=$(echo "$text" | sed -E "s/’/\'/g")
# left
#text=$(echo "$text" | sed -E "s/“/\"/g")
#text=$(echo "$text" | sed -E "s/‘/\'/g")

# remove unnecessary character
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})––/\1–/g")

# change ~ back to pilcrow signs
text=$(echo "$text" | sed -E 's/~/¶/g')
text=$(echo "$text" | sed -E ':a;$!{N;s/\n *¶ */ ¶/;ba;}')
text=$(echo "$text" | sed -E "s/^(.{$((width))})¶/\1\n     ¶/g")
text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9])    /\n\1   ↓/;ba;}')
text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9])   /\n\1  ↓/;ba;}')
text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9][0-9])  /\n\1 ↓/;ba;}')
#text=$(echo "$text" | sed -E 's/¶/←/g')
# text=$(echo "$text" | sed -E 's/ ⇙/⇙/g')
# text=$(echo "$text" | sed -E 's/^     ¶//g')
# text=$(echo "$text" | sed -E ':a;$!{N;s/ *¶/\n/;ba;}')

# remove blank lines
text=$(echo "$text" | sed -E 's/ *$//g')
text=$(echo "$text" | sed -E '/^$/d')
text=$(echo "$text" | sed -E '/^ *>* *$/d')

# reformat verse nums to be right-aligned
text=$(echo "$text" | sed -E 's/^([0-9]{2}) / \1/g')
text=$(echo "$text" | sed -E 's/^([0-9]{1})  /  \1/g')

if [[ $2 != '' ]]; then
  echo "$hline"
  padding=$(((width + ${#title}) / 2))
  printf "%*s\n" $padding "$title"
  echo "$hline"
  echo -e "${text}" | awk "/^ *$(($2 - 2)) /{print; flag=1; next} /^ *$(($2 - 1)) /{flag=0} flag"
  echo -e "${text}" | awk "/^ *$(($2 - 1)) /{print; flag=1; next} /^ *$(($2 - 0)) /{flag=0} flag"
  echo -e "${text}" | awk "/^ $(($2 - 0)) /{print \"\033[31m\" \$0; flag=1; next} /^( *$(($2 + 1)) |¹)/{flag=0} flag"
  echo -en "\033[0m"
  echo -e "${text}" | awk "/^ *$(($2 + 1)) /{print; flag=1; next} /^( *$(($2 + 2)) |¹)/{flag=0} flag"
  echo -e "${text}" | awk "/^ *$(($2 + 2)) /{print; flag=1; next} /^( *$(($2 + 3)) |¹)/{flag=0} flag"
else
  # add blank line before footnotes
  text=$(echo "$text" | sed -E 's/^¹/\n&/')
  output="$(
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "$text"
  )"
  echo "$output" | less -RFX
fi
