#!/bin/bash
# shellcheck disable=1111,1112,2034

show_help() {
  echo "Usage: $0 [-ch]"
  echo "   -c    Disable context verses"
  echo "   -h    Display help"
  exit 1
}

# Clear version variable if it exists and set defaults for others
ARG_CONTEXT="true" # Which version to use from BibleGateway.com

# Process command line args
while getopts ':c?h' c; do
  case $c in
  c) ARG_CONTEXT="false" ;;
  h | ?) show_help ;;
  esac
done
shift $((OPTIND - 1))

main() {
  text=$(cat ~/Bin/nkjv/"${1}".md)
  get_terminal_width
  print_title "$@"
  format_markdown
  # justify text
  for i in {1..4}; do
    justify_quotes
  done
  for i in {1..4}; do
    justify_normal
  done
  cleanup
  # output
  if [[ $3 != '' ]]; then
    print_passage "$@"
  elif [[ $2 != '' ]]; then
    print_verse "$@"
  else
    print_chapter
  fi
}
get_terminal_width() {
  width=$(tput cols)
}

print_title() {
  hline=$(
    printf '=%.0s' $(seq 1 "$width")
    echo
  )
  if [[ $3 != '' ]]; then
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) (Verse)/\1/'):$2-$3"
  elif [[ $2 != '' ]]; then
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) (Verse)/\1/'):$2"
  else
    title="$(echo "$text" | grep '^# .*' | sed 's/# \(.*\) (Verse)/\1/')"
  fi
}

format_markdown() {
  # remove headings
  text=$(echo "$text" | sed -E '1,3{d}')
  text=$(echo "$text" | sed -E 's/^(# |#### |##### ).*//')
  # format verses
  text=$(echo "$text" | sed -E 's/###### (¶* *[0-9][0-9][0-9])/\1   tempnewline/g')
  text=$(echo "$text" | sed -E 's/###### (¶* *[0-9][0-9])/\1    tempnewline/g')
  text=$(echo "$text" | sed -E 's/###### (¶* *[0-9])/\1     tempnewline/g')
  text=$(echo "$text" | sed -E ':a;$!{N;s/tempnewline\n//;ba;}')
  text=$(echo "$text" | sed -E 's/¶ 1 /1 /g')
  text=$(echo "$text" | sed -E ':a;$!{N;s/\n¶ / ~\n/;ba;}')
  # fix/remove markdown syntax
  text=$(echo "$text" | sed -E 's/\\\*/tempasterisk/g')
  text=$(echo "$text" | sed -E 's/==//g')
  text=$(echo "$text" | sed -E 's/—/––/g')
  # text=$(echo "$text" | sed -E 's/—/--/g')
  # bold -> braces
  text=$(echo "$text" | sed -E 's/\*\*([A-Za-z0-9])/{\1/g')
  text=$(echo "$text" | sed -E 's/([A-Za-z0-9])\*\*/\1}/g')
  text=$(echo "$text" | sed -E 's/\}([ !?.,”’”’;:]*)\{/\1/g')
  # italic -> brackets
  text=$(echo "$text" | sed -E 's/\*([A-Za-z0-9])/[\1/g')
  text=$(echo "$text" | sed -E 's/([A-Za-z0-9!?.,”’;:])\*/\1]/g')
  # \[ -> [ and \] -> ]
  text=$(echo "$text" | sed -E 's/\\\[/[/g')
  text=$(echo "$text" | sed -E 's/\\\]/]/g')
  text=$(echo "$text" | sed -E 's/\\//g')
  # remove footnotes
  #text=$(echo "$text" | sed -E 's/^\[\^[1-9]\].*//g')
  #text=$(echo "$text" | sed -E 's/\[\^[1-9]\]//g')
  # convert footnotes
  text=$(echo "$text" | sed -E 's/\[\^1\]:*/¹/g')
  text=$(echo "$text" | sed -E 's/\[\^2\]:*/²/g')
  text=$(echo "$text" | sed -E 's/\[\^3\]:*/³/g')
  text=$(echo "$text" | sed -E 's/\[\^4\]:*/⁴/g')
  text=$(echo "$text" | sed -E 's/\[\^5\]:*/⁵/g')
  text=$(echo "$text" | sed -E 's/\[\^6\]:*/⁶/g')
  text=$(echo "$text" | sed -E 's/^> /      > /g')
  #text=$(echo "$text" | sed -E 's/^> /      /g')
  #text=$(echo "$text" | sed -E 's/> / /g')
  text=$(echo "$text" | sed -E 's/tempasterisk/*/g')
  # add space before lines that are not on the same line as the verse num
  text=$(echo "$text" | sed -E 's/(^[^0-9 ])/      \1/g')
}

justify_quotes() {
  # add newline when width is a space
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 9))}) /\1\n      > /")
  # hyphenate words that are in width
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 9))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n      > \3\4/")
  # move char to newline if width-2 is [[
  text=$(echo "$text" | sed -E "s/^(.{$((width - 3))})\[\[([A-Za-z0-9])/\1\n      [[\2/")
  # move char to newline if width-1 is a space or symbol
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 9))})([ “‘[({])([A-Za-z0-9“‘[({])/\1\n      > \2\3/")
  # move char to newline if width-1 is a hyphen
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 9))})-([A-Za-z0-9“‘])/\1-\n      > \2/")
  # move char to newline if width is a hyphen
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 9))})([A-Za-z])-([A-Za-z])/\1\2-\n      > \3/")
  # add newline right after punctuation
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 8))})([!?.,”’;:])/\1\2\n      > /")
  # fix verses that didn't get move to newline
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 7))}) /\1\n      > /")
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 7))})([!?.,”’;:])/\1\n      > \2/")
  text=$(echo "$text" | sed -E "s/^(.{6}>.{$((width - 8))}) /\1\n      > /")
  # fix verse number spacing
  text=$(echo "$text" | sed -E 's/([0-9]{1})      /\1     /g')
  text=$(echo "$text" | sed -E 's/([0-9]{2})     /\1    /g')
  text=$(echo "$text" | sed -E 's/([0-9]{3})    /\1   /g')
  # add newline if width+1 is a space
  text=$(echo "$text" | sed -E "s/^(.{4}>.{$((width - 5))}) /\1\n      > /")
}

justify_normal() {
  # add newline when width is a space
  text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n      /")
  # hyphenate words that are in width
  text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n      \3\4/")
  # move char to newline if width-2 is [[
  text=$(echo "$text" | sed -E "s/^(.{$((width - 3))})\[\[([A-Za-z0-9])/\1\n      [[\2/")
  # move char to newline if width-1 is a space or symbol
  text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([ “‘[({])([A-Za-z0-9“‘[({])/\1\n      \2\3/")
  # move char to newline if width-1 is a hyphen
  text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})-([A-Za-z0-9“‘])/\1-\n      \2/")
  # move char to newline if width is a hyphen
  text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z])-([A-Za-z])/\1\2-\n      \3/")
  # add newline right after punctuation
  text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n      /")
  # fix verses that didn't get move to newline
  text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n      /")
  text=$(echo "$text" | sed -E "s/^(.{$((width))})([!?.,”’;:])/\1\n      \2/")
  text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n      /")
  # fix verse number spacing
  text=$(echo "$text" | sed -E 's/([0-9]{1})      /\1     /g')
  text=$(echo "$text" | sed -E 's/([0-9]{2})     /\1   /g')
  text=$(echo "$text" | sed -E 's/([0-9]{3})   /\1  /g')
  # add newline if width+1 is a space
  text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n      /")
}

cleanup() {
  # fix spacing
  text=$(echo "$text" | sed -E 's/^ {2,4}([^ ])/      \1/g')
  text=$(echo "$text" | sed -E 's/^ {6,}([^ ])/      \1/g')
  # remove unnecessary character
  text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})––/\1–/g")
  # change ~ back to pilcrow signs
  text=$(echo "$text" | sed -E 's/~/¶/g')
  text=$(echo "$text" | sed -E ':a;$!{N;s/\n *¶ */ ¶/;ba;}')
  text=$(echo "$text" | sed -E "s/^(.{$((width))})¶/\1\n     ¶/g")
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9])    /\n\1   ↓/;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9])   /\n\1  ↓/;ba;}')
  text=$(echo "$text" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9][0-9])  /\n\1 ↓/;ba;}')
  # remove blank lines
  text=$(echo "$text" | sed -E 's/ *$//g')
  text=$(echo "$text" | sed -E '/^$/d')
  text=$(echo "$text" | sed -E '/^ *>* *$/d')
  # reformat verse nums to be right-aligned
  text=$(echo "$text" | sed -E 's/^([0-9]{2}) / \1/g')
  text=$(echo "$text" | sed -E 's/^([0-9]{1})  /  \1/g')
  text=$(echo "$text" | sed -E 's/^([¹²³⁴⁵⁶]) (.*)/   \1[\2]/g')
  # fix verses in hundreds
  text=$(echo "$text" | sed -E 's/^([0-9]{3}) *> /\1   > /g')
}

print_passage() {
  output="$(
    # format editorial headings
    text=$(echo "$text" | sed -E 's/^ *## (.*)//')
    text=$(echo "$text" | sed -E '/^$/d')
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "${text}" | awk "/^ *$(($2)) /{print; flag=1; next} /^ *$(($3 + 1)) /{flag=0} flag"
  )"
  echo "$output" | less -RFX
}

print_verse() {
  # format editorial headings
  text=$(echo "$text" | sed -E 's/^ *## (.*)//')
  text=$(echo "$text" | sed -E '/^$/d')
  echo "$hline"
  padding=$(((width + ${#title}) / 2))
  printf "%*s\n" $padding "$title"
  echo "$hline"
  if [[ $ARG_CONTEXT == 'true' ]]; then
    echo -e "${text}" | awk "/^ *$(($2 - 2)) /{print; flag=1; next} /^ *$(($2 - 1)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2 - 1)) /{print; flag=1; next} /^ *$(($2 - 0)) /{flag=0} flag"
    echo -e "${text}" | awk "/^ *$2 /{print \"\033[31m\" \$0; flag=1; next} /^ *($(($2 + 1)) |¹)/{flag=0} flag"
    echo -en "\033[0m"
    echo -e "${text}" | awk "/^ *$(($2 + 1)) /{print; flag=1; next} /^ *($(($2 + 2)) |¹)/{flag=0} flag"
    echo -e "${text}" | awk "/^ *$(($2 + 2)) /{print; flag=1; next} /^ *($(($2 + 3)) |¹)/{flag=0} flag"
  elif [[ $ARG_CONTEXT == 'false' ]]; then
    echo -e "${text}" | awk "/^ *$2 /{print; flag=1; next} /^ *($(($2 + 1)) |¹)/{flag=0} flag"
  fi
}

print_chapter() {
  text=$(echo "$text" | sed -E "s/^      ## (.*)/\n      [\1]/g")
  text=$(echo "$text" | sed -E '1{/^ *$/d}')
  # add blank line before footnotes
  text=$(echo "$text" | sed -E 's/^ *¹/\n&/')
  output="$(
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "$text"
  )"
  echo "$output" | less -RFX
}

main "$@"

# miscellaneous testing

# short=(gn ex lv nm dt jos jdg ru 1sm 2sm 1kg 2kg 1ch 2ch ez ne es jb ps pr ec sg is jr lm ezk dn hs jl am ob jnh mc nah hab zph hg zch mal mt mk lk jn ac rm 1co 2co gl eph php col 1th 2th 1tm 2tm ti phm heb jms 1pt 2pt 1jn 2jn 3jn jd rv)
# medium=(gen ex lev num deut josh judg ruth 1sam 2sam 1kings 2kings 1chron 2chron ezra neh est job ps prov eccles song isa jer lam ezek dan hos joel amos obad jonah mic nah hab zeph hag zech mal matt mark luke john acts rom 1cor 2cor gal eph phil col 1thess 2thess 1tim 2tim titus philem heb james 1pet 2pet 1john 2john 3john jude rev)

# for ((i = 0; i < 66; i++)); do
#   if [ $1 == 0 ]; then
#     ((previous_book_num = book - 1))
#   fi
# done

# under change ~ back to pilcrow signs
# text=$(echo "$text" | sed -E 's/¶/←/g')
# text=$(echo "$text" | sed -E 's/ ⇙/⇙/g')
# text=$(echo "$text" | sed -E 's/^     ¶//g')
# text=$(echo "$text" | sed -E ':a;$!{N;s/ *¶/\n/;ba;}')

# replace smart smart with dumb quotes
# right
# text=$(echo "$text" | sed -E "s/”/\"/g")
# text=$(echo "$text" | sed -E "s/’/\'/g")
# left
# text=$(echo "$text" | sed -E "s/“/\"/g")
# text=$(echo "$text" | sed -E "s/‘/\'/g")

# inside print_chapter()
# bold=$(tput bold)
# italics=$(tput sitm)
# normal=$(tput sgr0)
# format editorial headings
# text=$(echo "$text" | sed -E "s/^      ## (.*)/      [${bold}\1${normal}]/g")

# inside format markdown
# 2bold=$(tput bold)
# 2italics=$(tput sitm)
# 2normal=$(tput sgr0)
# 2text=$(echo "$text" | sed -E "s/\*\*([A-Za-z])/${bold}\1/g")
# 2text=$(echo "$text" | sed -E "s/([A-Za-z])\*\*/\1${normal}/g")
# 2text=$(echo "$text" | sed -E "s/\*([A-Za-z])/${italics}\1/g")
# 2text=$(echo "$text" | sed -E "s/([A-Za-z])\*/\1${normal}/g")

# ideas
# remove newlines to make copying verses easier (by triple click)
