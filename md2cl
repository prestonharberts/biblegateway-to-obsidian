#!/bin/bash

text=$(cat ~/Documents/obsidian/Christianity/Bible/LSB/Reading/$1.md)

# remove headings
text=$(echo "$text" | sed -E '1,3{d}')
text=$(echo "$text" | sed -E 's/^(# |## |#### |##### ).*//')

# format verses
text=$(echo "$text" | sed -E 's/###### (¶* *[0-9][0-9][0-9])/\1 templine/g')
text=$(echo "$text" | sed -E 's/###### (¶* *[0-9][0-9])/\1  templine/g')
text=$(echo "$text" | sed -E 's/###### (¶* *[0-9])/\1   templine/g')
text=$(echo "$text" | sed -E ':a;$!{N;s/templine\n//;ba;}')
#text=$(echo "$text" | sed -E 's/¶ ([0-9]{1,3})( *) (.*)/\1↵\2\3/g')
text=$(echo "$text" | sed -E 's/¶ //g')

# fix/remove markdown syntax
text=$(echo "$text" | sed -E 's/—/ - /g')
text=$(echo "$text" | sed -E 's/\*//g')
text=$(echo "$text" | sed -E 's/\\//g')
text=$(echo "$text" | sed -E 's/\[//g')
text=$(echo "$text" | sed -E 's/\]//g')
#text=$(echo "$text" | sed -E 's/^> /    > /g')
text=$(echo "$text" | sed -E 's/^> /     /g')
text=$(echo "$text" | sed -E 's/> / /g')

# add space before lines that are not on the same line as the verse num
text=$(echo "$text" | sed -E 's/(^[^0-9 ])/    \1/g')

# fit to terminal width
width=$(tput cols)

# Psalms justification
# add newline when width is a space
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))}) /\1\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))}) /\1\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))}) /\1\n     > /")
# hyphenate words that are in width
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 8))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n     > \3\4/")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 8))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n     > \3\4/")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 8))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n     > \3\4/")
# move char to newline if width-1 is a space
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 8))}) ([A-Za-z0-9])/\1\n     > \2/")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 8))}) ([A-Za-z0-9])/\1\n     > \2/")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 8))}) ([A-Za-z0-9])/\1\n     > \2/")
# add newline right after punctuation
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))})([!?.,”’;:])/\1\2\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))})([!?.,”’;:])/\1\2\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))})([!?.,”’;:])/\1\2\n     > /")

# fix Psalms verses that didn't get move to newline
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 6))}) /\1\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 6))}) /\1\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 6))}) /\1\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 6))})([!?.,”’;:])/\1\n     > \2/")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 6))})([!?.,”’;:])/\1\n     > \2/")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 6))})([!?.,”’;:])/\1\n     > \2/")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))}) /\1\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))}) /\1\n     > /")
text=$(echo "$text" | sed -E "s/^(.{4}> .{$((width - 7))}) /\1\n     > /")

# pass 1/3
# add newline when width is a space
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
# hyphenate words that are in width
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
# move char to newline if width-1 is a space
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
# add newline right after punctuation
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")

# pass 2/3
# add newline when width is a space
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
# hyphenate words that are in width
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
# move char to newline if width-1 is a space
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
# add newline right after punctuation
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")

# fix verses that didn't get move to newline
text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width))})([!?.,”’;:])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width))})([!?.,”’;:])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width))})([!?.,”’;:])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")

# fix verse number spacing
text=$(echo "$text" | sed -E 's/([0-9]{1})    /\1   /g')
text=$(echo "$text" | sed -E 's/([0-9]{2})   /\1  /g')
text=$(echo "$text" | sed -E 's/([0-9]{3})  /\1 /g')

# fix poetry
#text=$(echo "$text" | sed -E 's/^([0-9]{1})      /\1     /g')
#text=$(echo "$text" | sed -E 's/^([0-9]{2})      /\1     /g')
#text=$(echo "$text" | sed -E 's/^([0-9]{3})  /\1   /g')
#text=$(echo "$text" | sed -E 's/^     ([^ ])/    \1/g')
# fix spacing
text=$(echo "$text" | sed -E 's/     /    /g')

# pass 3/3
# add newline when width is a space
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))}) /\1\n    /")
# hyphenate words that are in width
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))})([A-Za-z0-9])([A-Za-z0-9])([^ ])/\1\2-\n    \3\4/")
# move char to newline if width-1 is a space
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
text=$(echo "$text" | sed -E "s/^(.{$((width - 2))}) ([A-Za-z0-9])/\1\n    \2/")
# add newline right after punctuation
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")
text=$(echo "$text" | sed -E "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n    /")

# replace smart punctuation with dumb ones
# right
text=$(echo "$text" | sed -E "s/”/\"/g")
text=$(echo "$text" | sed -E "s/’/\'/g")
# left
text=$(echo "$text" | sed -E "s/“/\"/g")
text=$(echo "$text" | sed -E "s/‘/\'/g")

# remove blank lines
text=$(echo "$text" | sed -E 's/ *$//g')
text=$(echo "$text" | sed -E '/^$/d')
text=$(echo "$text" | sed -E '/^ *>* *$/d')

if [[ $2 != '' ]]; then
  echo "${text}" | awk "/^$(($2 - 2)) /{print; flag=1; next} /^$(($2 - 1)) /{flag=0} flag"
  echo "${text}" | awk "/^$(($2 - 1)) /{print; flag=1; next} /^$(($2 - 0)) /{flag=0} flag"
  echo "${text}" | awk "/^$(($2 - 0)) /{print \"\033[01;31m\" \$0; flag=1; next} /^$(($2 + 1)) /{flag=0} flag"
  echo -en "\033[0m"
  echo "${text}" | awk "/^$(($2 + 1)) /{print; flag=1; next} /^$(($2 + 2)) /{flag=0} flag"
  echo "${text}" | awk "/^$(($2 + 2)) /{print; flag=1; next} /^$(($2 + 3)) /{flag=0} flag"
  #echo "$text" | GREP_COLORS='ms=01;31' grep -E --color=always "^${2} .*" -A2 -B2 | less -RFX
else
  echo "$text" | less -FX
fi
